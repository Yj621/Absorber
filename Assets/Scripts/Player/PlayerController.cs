using System; using System.Collections.Generic; using UnityEngine; using UnityEngine.EventSystems; using UnityEngine.InputSystem; using System.Collections;  public class PlayerController : MonoBehaviour {     private SpriteRenderer spriteRenderer; // 罹먮┃?곗쓽 ?ㅽ봽?쇱씠???뚮뜑??     public Player player;      public GameObject[] enableObjects; // 二쎌뿀?꾨븣 鍮꾪솢?깊솕???ㅻ툕?앺듃 由ъ뒪??      private float dashCooldownTimer; // ???荑⑦??꾩쓣 怨꾩궛?섍린 ?꾪븳 ??대㉧      private int select1 = 1;     private int select2 = 1;      private bool isHit = false;     private bool isDie = false;      [SerializeField] private float invincibilityTime = 1f; // 罹먮┃??臾댁쟻 ?쒓컙     [SerializeField] private float moveSpeed = 10f; // 罹먮┃???대룞 ?띾룄     [SerializeField] private float jumpSpeed = 10f; // 罹먮┃???먰봽 ?띾룄      private Rigidbody2D rb; // 罹먮┃?곗쓽 Rigidbody2D      private Vector2 moveDirection; // ?낅젰???대룞 諛⑺뼢      private bool isJump; // ?먰봽 以묒씤吏 ?щ?瑜??섑??대뒗 ?뚮옒洹?     private bool isDashing; // ???以묒씤吏 ?щ?瑜??섑??대뒗 ?뚮옒洹?      public StateMachine stateMachine; // 罹먮┃?곗쓽 ?곹깭瑜?愿由ы븷 ?곹깭 癒몄떊     RopeActive grappling;      private void Awake()     {          // 而댄룷?뚰듃 珥덇린??         rb = GetComponent<Rigidbody2D>();         spriteRenderer = GetComponent<SpriteRenderer>();          player = new Player(                 maxHp: 100, // 理쒕? HP                 /*                moveSpeed: 10f, // ?대룞 ?띾룄                                 jumpSpeed: 10f, // ?먰봽 ?띾룄*/                 dashSpeed: 30f, // ????띾룄                 dashCooldown: 1f, // ???荑⑦???                 dashDuration: 0.2f// ???吏???쒓컙             );          // ?곹깭 癒몄떊 珥덇린??         stateMachine = new StateMachine(this);     }      private void Start()     {         // ?곹깭 癒몄떊??珥덇린 ?곹깭瑜?Idle濡??ㅼ젙         stateMachine.Initalize(stateMachine.idleState);         grappling = GetComponent<RopeActive>();     }      private void FixedUpdate()     {         // ???以묒씠 ?꾨땶 寃쎌슦?먮쭔 ?대룞 泥섎━         if (!isDashing)         {             ApplyMovement();         }     }      private void Update()     {         // ?곹깭 癒몄떊???꾩옱 ?곹깭瑜??ㅽ뻾         stateMachine.Execute();          // 留덉슦???꾩튂瑜?湲곕컲?쇰줈 罹먮┃?곗쓽 ?ㅽ봽?쇱씠??諛⑺뼢 ?ㅼ젙         Vector3 mouseScreenPosition = Mouse.current.position.ReadValue();         Vector3 mouseWorldPosition = UnityEngine.Camera.main.ScreenToWorldPoint(             new Vector3(mouseScreenPosition.x, mouseScreenPosition.y, Mathf.Abs(UnityEngine.Camera.main.transform.position.z))         );          // 留덉슦???꾩튂? 罹먮┃?곗쓽 ?꾩옱 ?꾩튂瑜?鍮꾧탳??罹먮┃?곗쓽 諛⑺뼢 ?ㅼ젙         if ((mouseWorldPosition.x > transform.position.x && spriteRenderer.flipX) ||             (mouseWorldPosition.x < transform.position.x && !spriteRenderer.flipX))         {             spriteRenderer.flipX = !spriteRenderer.flipX;         }          // ???荑⑦?????대㉧ ?낅뜲?댄듃         if (dashCooldownTimer > 0)         {             dashCooldownTimer -= Time.deltaTime;         }     }      // ?뚮젅?댁뼱媛 ?곕?吏瑜?諛쏆쓣 ??     public void TakeDamage(int damage)     {         if (player.IsAlive() && !isHit && !isDie)         {             isHit = true;             player.Damage(damage);              //player ??諛붾뚭쾶(?ㅼ튂??紐⑥뀡 or 臾댁쟻 紐⑥뀡)             stateMachine.TransitionTo(stateMachine.hurtState);              //Player 臾댁쟻 ?쒓컙             Invoke("Invincibility", invincibilityTime);              Debug.Log($"Player Hp : {player.PlayerHp}");         }         if (!player.IsAlive() && !isDie)         {             Die();         }     }      //臾댁쟻?쒓컙     private void Invincibility()     {         isHit = false;     }       public void Die()     {         foreach (var enableObject in enableObjects)         {             enableObject.SetActive(false);         }         stateMachine.TransitionTo(stateMachine.dieState);         Debug.Log("Player Die");         rb.constraints = RigidbodyConstraints2D.FreezeAll;          isDie = true;      }       //select1媛믪쓣 媛?몄삤??硫붿냼??     public int GetSelect1()     {         return select1;     }      //select2媛믪쓣 媛?몄삤??硫붿냼??     public int GetSelect2()     {         return select2;     }      //Q(臾?1), ?(2), 諛붿쐞(3))     public void OnSelect1(InputValue value)     {         if (select1 >= 3)         {             select1 = 1;         }         else         {             select1 += 1;         }         // SlowTime ?묐룞 諛??쒓컙 蹂듭썝 肄붾（???쒖옉         //SlowTime.Instance.Slow();         StopAllCoroutines(); // ?댁쟾 肄붾（??醫낅즺 (以묐났 諛⑹?)         //StartCoroutine(ResetTimeScale());     }      //E     public void OnSelect2(InputValue value)     {         if (select2 >= 3)         {             select2 = 1;         }         else         {             select2 += 1;         }         // SlowTime ?묐룞 諛??쒓컙 蹂듭썝 肄붾（???쒖옉         //SlowTime.Instance.Slow();         StopAllCoroutines(); // ?댁쟾 肄붾（??醫낅즺 (以묐났 諛⑹?)         //StartCoroutine(ResetTimeScale());     }      private IEnumerator ResetTimeScale()     {         yield return new WaitForSecondsRealtime(SlowTime.Instance.slowLength);         SlowTime.Instance.Back();     }       //?고겢由??≪닔     public void OnAbsorb()     {         WeaponController.Instance.AbsorbClick();     }      //?고겢由??≪닔 痍⑥냼     public void OnAbsorbCancle()     {         WeaponController.Instance.AbsorbClickUp();     }      //醫뚰겢由?諛⑹텧     public void OnEmit()     {         Combination();         WeaponController.Instance.WeaponSelect();     }       //醫뚰겢由?諛⑹텧 痍⑥냼     public void OnEmitCancle()     {         WeaponController.Instance.WeaponLeft();     }       //議고빀 寃곌낵     private void Combination()     {         Dictionary<(int, int), string> combinations = new Dictionary<(int, int), string>         {             { (1, 1), "water"}, //臾?臾?             { (2, 2), "treeVine" }, // ?+?             { (3, 3), "rockBomb" }, // 諛붿쐞+諛붿쐞             { (1, 2), "potion" }, // 臾??             { (2, 1), "potion" }, // ?+臾?             { (2, 3), "platform" }, // ?+諛붿쐞             { (3, 2), "platform" }, // 諛붿쐞+?             { (1, 3), "bullet" }, // 臾?諛붿쐞             { (3, 1), "bullet" }  // 諛붿쐞+臾?         };          //?좏깮??議고빀         var selectedCombination = (select1, select2);          // 議고빀???대떦?섎뒗 寃곌낵 異쒕젰         if (combinations.TryGetValue(selectedCombination, out string result))         {             Debug.Log($"諛⑹텧: {result}");             WeaponController.Instance.WeaponMode = result;         }         else         {             Debug.Log("?좏슚?섏? ?딆? 議고빀?낅땲??");         }     }       // ?대룞 ?낅젰 泥섎━     public void OnMove(InputValue value)     {         if (isDie) return; // isDie媛 true?쇰㈃ ?곹깭 ?꾪솚??留됱쓬          moveDirection = value.Get<Vector2>(); // ?대룞 諛⑺뼢 ?ㅼ젙                      if (moveDirection.x != 0)             {                 // ?대룞 ?낅젰???덈뒗 寃쎌슦 Walk ?곹깭濡??꾪솚                 stateMachine.TransitionTo(stateMachine.walkState);             }             else             {                 // ?대룞 ?낅젰???녿뒗 寃쎌슦 Idle ?곹깭濡??꾪솚                 stateMachine.TransitionTo(stateMachine.idleState);             }               }       // ?먰봽 ?낅젰 泥섎━     public void OnJump(InputValue value)     {         if (isDie) return; // isDie媛 true?쇰㈃ ?곹깭 ?꾪솚??留됱쓬          if (value.isPressed && !isJump)         {             isJump = true; // ?먰봽 ?뚮옒洹??ㅼ젙             rb.linearVelocity = new Vector2(rb.linearVelocity.x, moveSpeed); // ?먰봽 ?띾룄 ?곸슜             stateMachine.TransitionTo(stateMachine.jumpState); // ?먰봽 ?곹깭濡??꾪솚         }     }      // ????낅젰 泥섎━     public void OnSprint(InputValue value)     {         if (value.isPressed && !isDashing && dashCooldownTimer <= 0)         {             // 媛留뚰엳 ?덉쓣 ?뚮룄 ???諛⑺뼢??吏?뺥븯湲??꾪빐 flipX ?먮뒗 留덉슦???꾩튂瑜?湲곗??쇰줈 諛⑺뼢 ?ㅼ젙             float dashDirection = moveDirection.x != 0 ? moveDirection.x : (spriteRenderer.flipX ? -1 : 1);              StartCoroutine(Dash(dashDirection)); // ???諛⑺뼢??留ㅺ컻蹂?섎줈 ?꾨떖             stateMachine.TransitionTo(stateMachine.dashState); // ????곹깭濡??꾪솚         }     }      // ?대룞 濡쒖쭅 泥섎━     private void ApplyMovement()     {         if (grappling.isAttach)         {             rb.AddForce(new Vector2(moveDirection.x * moveSpeed, 0));         }         else         {             Vector2 targetVelocity = new Vector2(moveDirection.x * moveSpeed, rb.linearVelocity.y);             rb.linearVelocity = Vector2.Lerp(rb.linearVelocity, targetVelocity, 0.1f); // 遺?쒕윭??蹂??       }         }     }      // ???濡쒖쭅 泥섎━     private System.Collections.IEnumerator Dash(float dashDirection)     {         isDashing = true; // ????뚮옒洹??ㅼ젙         Vector2 dashVelocity = new Vector2(dashDirection * player.DashSpeed, rb.linearVelocity.y); // ???諛⑺뼢 ?ㅼ젙         // rb.AddForce(dashForce, ForceMode2D.Impulse); // ??????곸슜          Debug.Log($"Dash Velocity: {dashVelocity}");         rb.linearVelocity = dashVelocity;          yield return new WaitForSeconds(player.DashDuration); // ???吏???쒓컙 ?湲?         isDashing = false; // ????뚮옒洹??댁젣         dashCooldownTimer = player.DashCooldown; // ???荑⑦????ㅼ젙         stateMachine.TransitionTo(stateMachine.idleState); // Idle ?곹깭濡??꾪솚     }      // 諛붾떏 異⑸룎 媛먯?     private void OnCollisionEnter2D(Collision2D collision)     {         if (isDie) return; // isDie媛 true?쇰㈃ ?곹깭 ?꾪솚??留됱쓬         if (collision.gameObject.CompareTag("ground"))         {             isJump = false; // ?먰봽 ?뚮옒洹??댁젣             if (moveDirection.x != 0)             {                 // ?대룞 ?낅젰???덈뒗 寃쎌슦 Walk ?곹깭濡??꾪솚                 stateMachine.TransitionTo(stateMachine.walkState);             }             else             {                 // ?대룞 ?낅젰???녿뒗 寃쎌슦 Idle ?곹깭濡??꾪솚                 stateMachine.TransitionTo(stateMachine.idleState);             }         }         if (collision.gameObject.CompareTag("Item"))         {             Debug.Log("Items");             player.GetEnergyCore(1);             Destroy(collision.gameObject);         }     }  } 